package com.example;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.HashMap;
import java.util.Map;

public class MessageHandler {

    private final PuzzleGenerator puzzleGenerator = new PuzzleGenerator();
    private final Map<Long, PuzzleGenerator.Puzzle> userPuzzles = new HashMap<>();
    private final Map<Long, String> userDifficulty = new HashMap<>(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    private final Map<Long, Boolean> awaitingDifficulty = new HashMap<>(); // –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    private final Map<Long, TestSession> userTestSessions = new HashMap<>();

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    public SendMessage handleMessage(Update update) {
        String messageText = update.getMessage().getText().trim();  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        long chatId = update.getMessage().getChatId();

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ id —á–∞—Ç–∞
        System.out.println("Received message: '" + messageText + "' from Chat ID: " + chatId);

        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        switch (messageText) {
            case "/start":
                message.setText("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ù–∞–ø–∏—à–∏ /puzzle, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É.\n\n" +
                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∏–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏ /help.");
                awaitingDifficulty.put(chatId, false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
                break;

            case "/test":
                startTest(chatId);
                message.setText("–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è! –í–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n" + userTestSessions.get(chatId).getCurrentPuzzle().getQuestion());
                break;

            case "/puzzle":
                message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n1. –õ–µ–≥–∫–∏–π\n2. –°—Ä–µ–¥–Ω–∏–π\n3. –°–ª–æ–∂–Ω—ã–π\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è.");
                awaitingDifficulty.put(chatId, true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
                break;

            case "/help":
                message.setText("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/puzzle - –ü–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É\n/answer - –£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É\n/help - –°–ø—Ä–∞–≤–∫–∞\n/test - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç");
                break;

            case "/answer":
                if (userPuzzles.containsKey(chatId)) {
                    PuzzleGenerator.Puzzle puzzle = userPuzzles.get(chatId);
                    message.setText("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + puzzle.getAnswer() + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ /puzzle, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É.");
                    userPuzzles.remove(chatId); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞
                } else {
                    message.setText("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ /puzzle, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É.");
                }
                break;

            default:
                // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                if (awaitingDifficulty.getOrDefault(chatId, false) && (messageText.equals("1") || messageText.equals("2") || messageText.equals("3"))) {
                    String difficulty = getDifficultyFromChoice(messageText);

                    if (difficulty != null) {
                        userDifficulty.put(chatId, difficulty);
                        PuzzleGenerator.Puzzle puzzle = puzzleGenerator.getRandomPuzzle(difficulty);
                        userPuzzles.put(chatId, puzzle);
                        message.setText("–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞:\n" + puzzle.getQuestion() + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç.");
                        awaitingDifficulty.put(chatId, false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
                    }
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                else if (userPuzzles.containsKey(chatId)) {
                    PuzzleGenerator.Puzzle puzzle = userPuzzles.get(chatId);
                    if (messageText.equalsIgnoreCase(puzzle.getAnswer())) {
                        message.setText("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π üéâ\n–ù–∞–ø–∏—à–∏—Ç–µ /puzzle, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É.");
                        userPuzzles.remove(chatId);
                    } else {
                        message.setText("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /answer, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.");
                    }
                }
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞
                else if (userTestSessions.containsKey(chatId)) {
                    handleTestAnswer(chatId, messageText, message);
                }
                // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
                else {
                    message.setText("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                }
                break;
        }

        return message;
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
    private String getDifficultyFromChoice(String choice) {
        switch (choice) {
            case "1": return "easy";
            case "2": return "medium";
            case "3": return "hard";
            default: return null;
        }
    }
    private void startTest(long chatId) {
        TestSession testSession = new TestSession();

        // –î–æ–±–∞–≤–ª—è–µ–º 3 –ª–µ–≥–∫–∏—Ö, 3 —Å—Ä–µ–¥–Ω–∏—Ö –∏ 2 —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("easy"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("easy"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("easy"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("medium"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("medium"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("medium"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("hard"));
        testSession.addPuzzle(puzzleGenerator.getRandomPuzzle("hard"));

        userTestSessions.put(chatId, testSession);
    }
    private void handleTestAnswer(long chatId, String messageText, SendMessage message) {
        TestSession session = userTestSessions.get(chatId);
        PuzzleGenerator.Puzzle currentPuzzle = session.getCurrentPuzzle();

        if (messageText.equalsIgnoreCase(currentPuzzle.getAnswer())) {
            session.markAnswer(true);
            if (session.isTestCompleted()) {
                message.setText("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n" + getTestStatistics(session));
                userTestSessions.remove(chatId);
            } else {
                message.setText("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n" + session.getCurrentPuzzle().getQuestion());
            }
        } else {
            session.markAnswer(false);
            if (session.isTestCompleted()) {
                message.setText("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n" + getTestStatistics(session));
                userTestSessions.remove(chatId);
            } else {
                if (session.getAttemptsLeft() == 2) {
                    message.setText("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n" + session.getCurrentPuzzle().getQuestion());
                } else {
                    message.setText("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: " + session.getAttemptsLeft());
                }
            }
        }
    }
    private String getTestStatistics(TestSession session) {
        int correctAnswers = (int) session.getAnswersCorrect().stream().filter(Boolean::booleanValue).count();
        int totalQuestions = session.getPuzzles().size();

        StringBuilder result = new StringBuilder();
        result.append("–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ ").append(correctAnswers).append(" –∏–∑ ").append(totalQuestions).append(" –≤–æ–ø—Ä–æ—Å–æ–≤.\n");

        if (correctAnswers <= 2) {
            result.append("–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!");
        } else if (correctAnswers <= 4) {
            result.append("–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!");
        } else {
            result.append("–û—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å! –ú–æ–ª–æ–¥–µ—Ü!");
        }

        return result.toString();
    }

}